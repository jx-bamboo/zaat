<div class="home">
  <%= render "layouts/header" %>
  <div class="container">
    <div class="row text-light fs0875">
      <div class="col-sm-6 px-2">
        <div class="bg_order_card px-3 h-100">
          <div class="fs-4 text-center py-5">Create your 3D Models</div>
          <%= form_for(@order, url: order_index_path(@order), html: {class: "order_form"}) do |f| %>
            <div class="accordion mb-3" id="accordionExample">
              <div class="accordion-item bg-transparent border-0">
                <h2 class="accordion-header fs0875 text-bg-dark">
                  <button class="w-100 text-bg-dark border-0 p-3 d-flex justify-content-between align-items-center" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    <span>Describe your creation in detail</span>
                    <%= bootstrap_icon "chevron-down", width: 24, height: 24 %>
                  </button>
                </h2>
                <div id="collapseOne" class="accordion-collapse collapse show border-0" data-bs-parent="#accordionExample">
                  <div class="accordion-body mx-0 px-0">
                    <%= f.text_area :prompt, rows: 5, class: "form-control text-secondary bg-transparent border-dark mb-3 fs0875", contenteditable: true, placeholder: "Enter your Prompt", required: "required" %>
                  </div>
                </div>
              </div>
              <div class="accordion-item bg-transparent border-0">
                <h2 class="accordion-header fs0875 text-bg-dark">
                  <button class="w-100 text-bg-dark border-0 p-3 d-flex justify-content-between align-items-center collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    <span>Image</span>
                    <%= bootstrap_icon "chevron-down", width: 24, height: 24 %>
                  </button>
                </h2>
                <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                  <div class="accordion-body mx-0 px-0 mb-3">
                    <%#= f.file_field :file, autofocus: true, class: "form-control form-control-lg text-secondary bg-transparent border-dark", required: "required" %>
                    <div class="mb-3 position-relative">
                      <div class="text-center border border-dark py-3" style="height: 200px;">
                        <%= image_tag "upload.svg", class: "rounded img-fluid h-100 shadow", id: "preview", alt: "CAKEBABA", title: "CAKEBABA" %>
                        <%= f.file_field :file, class: "form-control preview-file cred", accept: "image/*", onclick: "uploadImg('order_file','preview')", alt: "Upload", title: "Upload" %>
                      </div>
                      <div class="text-center text-light pt-2">Recommended image size should be under 10Mb.</div>
                    </div>
                    <%= javascript_include_tag "preview_img", "data-turbo-track": "reload" %>
                  </div>
                </div>
              </div>
            </div>
            <div class="mb-3">xToken Rewards Service Fee</div>
            <%#= f.submit "Create & Pay", class: "form-control hover_to_gradient btn btn-lg btn-dark rounded-pill mb-5" %>
            <button type="button" class="eth_pay form-control hover_to_gradient btn btn-lg btn-dark rounded-pill mb-5">Create & Pay</button>
          <% end %>
          <script src=" https://cdn.jsdelivr.net/npm/web3@4.9.0/dist/web3.min.js "></script>
          
          <script>
      
            var buttonEthConnect = document.querySelector("button.eth_pay");




            if (typeof window.ethereum !== "undefined") {
              console.log("... 安装了metamask...")
              //const chainid = requestChainId();
              //console.log(chainid)

              buttonEthConnect.addEventListener("click", async () => {
                console.log("。。。 点击了按钮 。。。")

                const address = await requestAccounts();
                console.log(address);

                const chainid = await requestChainId();
                console.log(chainid)

                await checkBscNet();



                console.log('...... ......')
                web3 = new Web3(window.ethereum)
                
                const contract_address = "0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee"
                const contract_abi = [{"constant":false,"inputs":[],"name":"disregardProposeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"assetProtectionRole","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"r","type":"bytes32[]"},{"name":"s","type":"bytes32[]"},{"name":"v","type":"uint8[]"},{"name":"to","type":"address[]"},{"name":"value","type":"uint256[]"},{"name":"fee","type":"uint256[]"},{"name":"seq","type":"uint256[]"},{"name":"deadline","type":"uint256[]"}],"name":"betaDelegatedTransferBatch","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"sig","type":"bytes"},{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"fee","type":"uint256"},{"name":"seq","type":"uint256"},{"name":"deadline","type":"uint256"}],"name":"betaDelegatedTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"initializeDomainSeparator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"unfreeze","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claimOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_newSupplyController","type":"address"}],"name":"setSupplyController","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_addr","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"target","type":"address"}],"name":"nextSeqOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newAssetProtectionRole","type":"address"}],"name":"setAssetProtectionRole","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"freeze","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newWhitelister","type":"address"}],"name":"setBetaDelegateWhitelister","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"decreaseSupply","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_addr","type":"address"}],"name":"isWhitelistedBetaDelegate","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"whitelistBetaDelegate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_proposedOwner","type":"address"}],"name":"proposeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"increaseSupply","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"betaDelegateWhitelister","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"proposedOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"unwhitelistBetaDelegate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"wipeFrozenAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"EIP712_DOMAIN_HASH","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_addr","type":"address"}],"name":"isFrozen","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"supplyController","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"reclaimBUSD","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"currentOwner","type":"address"},{"indexed":true,"name":"proposedOwner","type":"address"}],"name":"OwnershipTransferProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"oldProposedOwner","type":"address"}],"name":"OwnershipTransferDisregarded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"oldOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"}],"name":"AddressFrozen","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"}],"name":"AddressUnfrozen","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"}],"name":"FrozenAddressWiped","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"oldAssetProtectionRole","type":"address"},{"indexed":true,"name":"newAssetProtectionRole","type":"address"}],"name":"AssetProtectionRoleSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SupplyIncreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"SupplyDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"oldSupplyController","type":"address"},{"indexed":true,"name":"newSupplyController","type":"address"}],"name":"SupplyControllerSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"seq","type":"uint256"},{"indexed":false,"name":"fee","type":"uint256"}],"name":"BetaDelegatedTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"oldWhitelister","type":"address"},{"indexed":true,"name":"newWhitelister","type":"address"}],"name":"BetaDelegateWhitelisterSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"newDelegate","type":"address"}],"name":"BetaDelegateWhitelisted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"oldDelegate","type":"address"}],"name":"BetaDelegateUnwhitelisted","type":"event"}]
                const contract_token = new web3.eth.Contract(contract_abi, contract_address)
                console.log(contract_token)
                

                const to = "0x221b2a964eC6c381EA3c33532130bda1b27FF23b"
                const value = web3.utils.toWei('1','ether')
                const txReceipt = await contract_token.methods.transfer(to,value).send({from: address})
                console.log('Tx hash:',txReceipt.transactionHash)







              });
            } else {
              console.log("... 没有安装 metamask ...")

              buttonEthConnect.innerHTML = "Metamask Not Installed";
              buttonEthConnect.disabled = true;
            }

            async function requestAccounts() {
              const accounts = await ethereum.request({ method: "eth_accounts" });
              return accounts[0];
            }

            async function requestBalance(address) {
              const balance = await ethereum.request({method: "eth_getBalance", params: [address]});
              return parseInt(balance, 16) / Math.pow(10, 18);
            }

            async function requestChainId() {
              console.log("... 进入chainid ...")
              const chainid = await ethereum.request({method: "eth_chainId"});
              return chainid;
            }

            async function checkBscNet() {
              const chainid = await requestChainId();
              if (chainid === '0x61') {
                console.log('用户已连接到 BSC 网络，执行下一步操作 ..')
              } else {
                console.log('用户没有BSC网络xxxxxxx')
                try {
                  console.log("in to try");
                  await ethereum.request({
                      method: 'wallet_addEthereumChain',
                      params: [{
                          chainId: '0x61',
                          chainName: 'BNB Smart Chain Testnet',
                          nativeCurrency: {
                            name: "BNB",
                            symbol: "BNB",
                            decimals: 18,
                          },
                          rpcUrls: ['https://data-seed-prebsc-1-s1.bnbchain.org:8545'],
                          blockExplorerUrls: ['https://testnet.bscscan.com']
                      }]
                  });

                  // console.log('Switch to the BSC network')
                  //await ethereum.request({ method: "wallet_switchEthereumChain", params: [{ chainId: "0x61" }] });
                  // 提示用户已成功添加 BSC 网络
                  console.log('用户已连接到 BSC test 网络 .........................')
                } catch (error) {
                  console.error(error);
                }
              }
            }
            


          </script>
          
        </div>
      </div>

      <div class="col-sm-6 px-2 text-center">
        <div class="bg_order_card px-4 h-100 d-flex flex-column justify-content-center">
          <div class>Generating 3D model.</div>
          <div class>The process may take up to 3 minutes.</div>
          <div class>You can continue waiting or check back later by clicking 'My profile'.</div>
          <div class="progress border-0 bg-dark" role="progressbar" aria-label="dark example" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
            <div class="progress-bar bg-dark border-0" style="width: 100%"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>